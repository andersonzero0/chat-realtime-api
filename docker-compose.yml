services:
  app:
    build: .
    volumes:
      - .:/home/node/app
    environment:
      - TZ=${CONTAINER_TIMEZONE:-UTC}
    ports:
      - 3000:3000
    networks:
      - backend

  mongodb:
    build: ./.docker/mongodb
    container_name: mongodb
    environment:
      TZ: ${CONTAINER_TIMEZONE:-UTC}
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_USER:-chat-api}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD:-chat-api}
    ports:
      - '${MONGODB_PORT:-27017}:27017'
    networks:
      - backend

  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - 8081:8081
    environment:
      TZ: ${CONTAINER_TIMEZONE:-UTC}
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: root
      ME_CONFIG_MONGODB_URL: mongodb://root:root@mongodb:27017?authSource=admin&directConnection=true
      ME_CONFIG_BASICAUTH: false
    networks:
      - backend

  minio:
    container_name: ${CONTAINER_NAME}-minio
    image: minio/minio:latest
    ports:
      - '${FORWARD_MINIO_PORT:-9000}:9000'
      - '${FORWARD_MINIO_CONSOLE_PORT:-8900}:8900'
    environment:
      TZ: ${CONTAINER_TIMEZONE:-UTC}
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-chat-api}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-chat-api-pass}
    volumes:
      - minio_storage:/data/minio
    networks:
      - backend
    command: 'minio server /data/minio --console-address ":8900"'

  redis_container:
    image: redis:${REDIS_VERSION}
    container_name: redis
    environment:
      TZ: ${CONTAINER_TIMEZONE:-UTC}
    ports:
      - '${REDIS_PORT:-6379}:6379'
    networks:
      - backend
    volumes:
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf
    command: ['redis-server', '/usr/local/etc/redis/redis.conf']

  kafka:
    image: bitnami/kafka:${KAFKA_VERSION}
    restart: on-failure
    ports:
      - '${KAFKA_EXTERNAL_PORT:-9093}:9093'
    environment:
      - TZ=${CONTAINER_TIMEZONE:-UTC}
      - KAFKA_BROKER_ID=${KAFKA_BROKER_ID:-1}
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:${ZOOKEEPER_PORT:-2181}
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:${KAFKA_CLIENT_PORT:-9092},EXTERNAL://:${KAFKA_EXTERNAL_PORT:-9093}
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:${KAFKA_CLIENT_PORT:-9092},EXTERNAL://${KAFKA_HOST:-localhost}:${KAFKA_EXTERNAL_PORT:-9093}
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT
      - KAFKA_CFG_NUM_PARTITIONS=${KAFKA_NUM_PARTITIONS:-100}
    networks:
      - backend
    depends_on:
      - zookeeper

  zookeeper:
    image: bitnami/zookeeper:${ZOOKEEPER_VERSION}
    ports:
      - ${ZOOKEEPER_PORT:-2181}:2181
    environment:
      - TZ=${CONTAINER_TIMEZONE:-UTC}
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - backend

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    depends_on:
      - kafka
      - zookeeper
    ports:
      - '${KAFKA_PORT:-8080}:8080'
    restart: always
    networks:
      - backend
    environment:
      - TZ=${CONTAINER_TIMEZONE:-UTC}
      - KAFKA_CLUSTERS_0_NAME=${CONTAINER_NAME}
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:${KAFKA_CLIENT_PORT}
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:${ZOOKEEPER_PORT}

networks:
  backend:
    name: ${CONTAINER_NAME}-net
    driver: bridge

volumes:
  minio_storage:
    driver: local
